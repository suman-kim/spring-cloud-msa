server:
  port: 8000

eureka:
  client:
    registerWithEureka: true
    fetchRegistry: true
    service-url:
        defaultZone: http://localhost:8761/eureka


spring:
  application:
    name: apigateway-service
  cloud:
      gateway:
        default-filters:
          - name: GlobalFilter
            args:
                baseMessage: Spring Cloud Gateway Global Filter
                preLogger: true
                postLogger: true
        routes:
          - id: user-service
            # 유레카에 등록된 서비스 이름
            uri: lb://USER-SERVICE
            predicates:
              - Path=/user-service/**
              - Method=GET,POST
            filters:
              # request 할때 "/user-service"를 제거하고 userService의 서비스 애플리케이션으로 요청을 보냄
              - RewritePath=/user-service/(?<segment>.*), /$\{segment}
          - id: user-service
            uri: lb://USER-SERVICE
            predicates:
              - Path=/user-service/actuator/**
              - Method=GET,POST
            filters:
              - RemoveRequestHeader=Cookie
              - RewritePath=/user-service/(?<segment>.*), /$\{segment}
          - id: catalog-service
            # 유레카에 등록된 서비스 이름
            uri: lb://CATALOG-SERVICE
            predicates:
              - Path=/catalog-service/**
            filters:
              - RemoveRequestHeader=Cookie
          - id: order-service
            # 유레카에 등록된 서비스 이름
            uri: lb://ORDER-SERVICE
            predicates:
              - Path=/order-service/**
            filters:
              - RemoveRequestHeader=Cookie
#          - id: first-service
#            uri: lb://FIRST-SERVICE
#            predicates:
#              - Path=/first-service/**
#            # request 와 response 에 header 를 추가하는 필터
#            filters:
##              - AddRequestHeader=first-request, first-request-header2
##              - AddResponseHeader=first-response, first-response-header2
#              - CustomFilter
#          - id: second-service
#            uri: lb://SECOND-SERVICE
#            predicates:
#              - Path=/second-service/**
#            filters:
##                - AddRequestHeader=second-request, second-request-header2
##                - AddResponseHeader=second-response, second-response-header2
#              - name: CustomFilter
#              - name: LoggingFilter
#                args:
#                  baseMessage: Hi, there.
#                  preLogger: true
#                  postLogger: true


management:
  endpoints:
    web:
        exposure:
            include: refresh, health, beans, httptrace
